generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL") // Docker Url
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              String            @id @default(uuid())
  googleId        String
  name            String?
  email           String            @unique
  picture         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  refresh_token   RefreshToken[]
  EventUser       EventUser[]
  EventInvitation EventInvitation[]

  @@map("users")
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id])
  userId    String

  @@map("refresh_token")
}

model EventUser {
  id              String          @id @default(uuid())
  eventId         String
  userId          String
  role            Role
  event           Event           @relation(fields: [eventId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  checkInTime     DateTime?
  eventUserStatus EventUserStatus @default(ACCEPTED)

  @@unique([eventId, userId])
  @@map("event_users")
}

model Event {
  id              String            @id @default(uuid())
  name            String
  description     String
  startDateTime   DateTime
  endDateTime     DateTime
  address         String
  createdAt       DateTime          @default(now())
  EventUser       EventUser[]
  EventInvitation EventInvitation[]

  @@map("event")
}

model EventInvitation {
  id      String                @id @default(uuid())
  eventId String
  userId  String
  event   Event                 @relation(fields: [eventId], references: [id])
  user    User                  @relation(fields: [userId], references: [id])
  status  EventInvitationStatus

  @@map("event_invitation")
}

enum Role {
  ORGANIZER
  PARTICIPANT
}

enum EventInvitationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventUserStatus {
  ACCEPTED // Aceito
  CHECKED_IN // Presente
  NO_SHOW // Ausente
  CANCELLED // Cancelado
}
